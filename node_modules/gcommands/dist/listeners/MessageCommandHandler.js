"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HandlerManager_1 = require("../lib/managers/HandlerManager");
const Listener_1 = require("../lib/structures/Listener");
const Logger_1 = require("../lib/util/logger/Logger");
const getMentionPrefix = (message) => {
    if (message.content.length < 20 || !message.content.startsWith('<@'))
        return null;
    const mention = message.content
        .split(' ')[0]
        .match(new RegExp(`^<@!?(${message.client.user.id})>`));
    return mention?.[0] ?? null;
};
const getPrefix = (message, prefixes) => {
    const mention = getMentionPrefix(message);
    if (mention)
        return mention;
    if (typeof prefixes === 'string')
        return message.content.startsWith(prefixes) ? prefixes : null;
    return prefixes.find(prefix => message.content.startsWith(prefix)) ?? null;
};
new Listener_1.Listener({
    event: 'messageCreate',
    name: 'gcommands-messageCommandHandler',
    run: async (message) => {
        const client = message.client;
        if (!client.options.messageSupport)
            return;
        const prefix = getPrefix(message, typeof client.options.messagePrefix === 'function'
            ? await client.options.messagePrefix(message)
            : client.options.messagePrefix);
        if (!prefix || !message.content.startsWith(prefix))
            return;
        const [commandName, ...args] = message.content
            .slice(prefix?.length)
            .trim()
            .split(/ +/g);
        if (commandName.length === 0)
            return;
        await Promise.resolve(HandlerManager_1.Handlers.messageCommandHandler(message, commandName, args)).catch(error => {
            Logger_1.Logger.error(typeof error.code !== 'undefined' ? error.code : '', error.message);
            if (error.stack)
                Logger_1.Logger.trace(error.stack);
        });
    },
});
