"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugins = exports.PluginManager = void 0;
const discord_js_1 = require("discord.js");
const pluginFinder_1 = require("../loaders/pluginFinder");
const Plugin_1 = require("../structures/Plugin");
const Logger_1 = require("../util/logger/Logger");
class PluginManager extends discord_js_1.Collection {
    constructor() {
        super(...arguments);
        this.currentlyLoading = null;
    }
    register(plugin) {
        if (plugin instanceof Plugin_1.Plugin) {
            if (this.has(plugin.name))
                Logger_1.Logger.warn('Overwriting plugin', plugin.name);
            this.set(plugin.name, plugin);
            Logger_1.Logger.emit(Logger_1.Events.PLUGIN_REGISTERED, plugin);
            Logger_1.Logger.debug('Registered plugin', plugin.name);
        }
        else {
            Logger_1.Logger.warn('Plugin must be a instance of plugin');
        }
        return this;
    }
    async search(basedir) {
        await (0, pluginFinder_1.pluginFinder)(basedir);
    }
    async initiate(client) {
        this.client = client;
        for await (const plugin of this.values()) {
            this.currentlyLoading = plugin.name;
            await Promise.resolve(plugin.run(client))
                .catch(error => {
                Logger_1.Logger.error(typeof error.code !== 'undefined' ? error.code : '', error.message);
                if (error.stack)
                    Logger_1.Logger.trace(error.stack);
            })
                .then(() => {
                this.currentlyLoading = null;
            });
        }
    }
}
exports.PluginManager = PluginManager;
exports.Plugins = new PluginManager();
