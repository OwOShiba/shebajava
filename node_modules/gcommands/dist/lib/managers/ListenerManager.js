"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listeners = exports.ListenerManager = void 0;
const discord_js_1 = require("discord.js");
const PluginManager_1 = require("./PluginManager");
const Listener_1 = require("../structures/Listener");
const Logger_1 = require("../util/logger/Logger");
class ListenerManager extends discord_js_1.Collection {
    register(listener) {
        if (listener instanceof Listener_1.Listener) {
            if (this.has(listener.name)) {
                this.get(listener.name).unregister();
                if (!this.get(listener.name)?.reloading)
                    Logger_1.Logger.warn('Overwriting listener', listener.name);
            }
            if (this.client)
                this.initialize(listener);
            if (PluginManager_1.Plugins.currentlyLoading)
                listener.owner = PluginManager_1.Plugins.currentlyLoading;
            this.set(listener.name, listener);
            Logger_1.Logger.emit(Logger_1.Events.LISTENER_REGISTERED, listener);
            Logger_1.Logger.debug('Registered listener', listener.name, 'listening to', listener.event, listener.owner ? `(by plugin ${listener.owner})` : '');
        }
        else {
            Logger_1.Logger.warn('Listener must be a instance of Listener');
        }
        return this;
    }
    unregister(name) {
        const listener = this.get(name);
        if (listener) {
            this.delete(name);
            if (this.client) {
                const maxListeners = this.client.getMaxListeners();
                if (maxListeners !== 0)
                    this.client.setMaxListeners(maxListeners - 1);
                listener.ws
                    ? this.client.ws.off(listener.event, listener._run)
                    : this.client.off(listener.event, listener._run);
            }
            Logger_1.Logger.emit(Logger_1.Events.LISTENER_UNREGISTERED, listener);
            Logger_1.Logger.debug('Unregistered listener', listener.name, 'listening to', listener.event);
        }
        return listener;
    }
    initialize(listener) {
        const maxListeners = this.client.getMaxListeners();
        if (maxListeners !== 0)
            this.client.setMaxListeners(maxListeners + 1);
        listener.initialize(this.client);
        return listener;
    }
    async initiate(client) {
        this.client = client;
        this.forEach(listener => listener.initialize(client));
    }
}
exports.ListenerManager = ListenerManager;
exports.Listeners = new ListenerManager();
