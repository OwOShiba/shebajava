"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GClient = exports.AutoDeferType = void 0;
const tslib_1 = require("tslib");
const node_timers_1 = require("node:timers");
const discord_js_1 = require("discord.js");
const CommandManager_1 = require("./managers/CommandManager");
const ComponentManager_1 = require("./managers/ComponentManager");
const ListenerManager_1 = require("./managers/ListenerManager");
const PluginManager_1 = require("./managers/PluginManager");
const registerDirectories_1 = require("./util/registerDirectories");
const responses_json_1 = tslib_1.__importDefault(require("../responses.json"));
/**
 * Enum for the auto defer feature.
 *
 * Automatically defers interaction if application doesn't respond in 3s
 * * EPHEMERAL
 * * NORMAL
 * * UPDATE
 */
var AutoDeferType;
(function (AutoDeferType) {
    /**
     * @example interaction.deferReply({ ephemeral: true })
     */
    AutoDeferType[AutoDeferType["EPHEMERAL"] = 1] = "EPHEMERAL";
    /**
     * @example interaction.deferReply()
     */
    AutoDeferType[AutoDeferType["NORMAL"] = 2] = "NORMAL";
    /**
     * @example interaction.deferUpdate()
     */
    AutoDeferType[AutoDeferType["UPDATE"] = 3] = "UPDATE";
})(AutoDeferType = exports.AutoDeferType || (exports.AutoDeferType = {}));
/**
 * The base {@link Client} that GCommands uses.
 *
 * @see {@link GClientOptions} for all available options for GClient.
 *
 * @extends {Client}
 */
class GClient extends discord_js_1.Client {
    constructor(options) {
        super(options);
        /**
         * Object of the default responses that GCommands uses for auto responding in the case of something happening.
         *
         * You can customize these messages using the
         * [@gcommands/plugin-language](https://github.com/Garlic-Team/gcommands-addons/tree/master/packages/plugin-language)
         * plugin.
         *
         * @see {@link Responses}
         */
        this.responses = responses_json_1.default;
        if (options.dirs)
            (0, registerDirectories_1.registerDirectories)(options.dirs);
        if (this.options.database) {
            if (typeof this.options.database.init === 'function')
                this.options.database.init();
        }
        // Load all managers before login.
        (0, node_timers_1.setImmediate)(async () => {
            await Promise.all([
                PluginManager_1.Plugins.initiate(this),
                CommandManager_1.Commands.initiate(this),
                ComponentManager_1.Components.initiate(this),
                ListenerManager_1.Listeners.initiate(this),
            ]);
        });
    }
    /**
     * The method that returns the database option provided in {@link GClientOptions}
     * @param {any} _ Used for typings
     * @returns {Database}
     * @example TypeScript example
     * ```typescript
     * import { MongoDBProvider } from 'gcommands/dist/providers/MongoDBProvider';
     *
     * const client = new GClient({
     * 		..settings,
     * 		database: new MongoDBProvider('mongodb://localhost:27017/database')
     * })
     *
     * const db = client.getDatabase(MongoDBProvider.prototype);
     * // returns <MongoDBProvider>
     * ```
     * @example JavaScript example
     * ```javascript
     * const { MongoDBProvider } = require('gcommands/dist/providers/MongoDBProvider');
     *
     * const client = new GClient({
     * 		..settings,
     * 		database: new MongoDBProvider('mongodb://localhost:27017/database')
     * })
     *
     * const db = client.getDatabase(MongoDBProvider.prototype);
     * // returns <MongoDBProvider>
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getDatabase(_) {
        return this.options.database;
    }
}
exports.GClient = GClient;
