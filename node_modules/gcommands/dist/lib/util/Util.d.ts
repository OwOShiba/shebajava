import type { Client, CommandInteractionOption, ApplicationCommandType } from 'discord.js';
import type { GClient } from '../GClient';
import type { CommandContext } from '../structures/contexts/CommandContext';
import type { ComponentContext } from '../structures/contexts/ComponentContext';
import type { CommandInhibitor } from '../structures/Command';
import type { ComponentInhibitor } from '../structures/Component';
/**
 * Includes many useful functions
 */
export declare class Util extends null {
    /**
     * Converts [CommandInteractionOptionResolver](https://discord.js.org/#/docs/discord.js/stable/class/CommandInteractionOptionResolver) to an array
     * @param {import('discord.js').CommandInteractionOptionResolver[]} options The options to convert
     * @deprecated We don't support arguments in object
     * @returns {string[]}
     */
    static argumentsToArray(options: CommandInteractionOption[]): string[];
    /**
     * Converts [CommandInteractionOptionResolver](https://discord.js.org/#/docs/discord.js/stable/class/CommandInteractionOptionResolver) to an object
     * @param {import('discord.js').CommandInteractionOptionResolver[]} options The options to convert
     * @deprecated We don't support arguments in object
     * @returns {any}
     */
    static argumentsToObject(options: CommandInteractionOption[]): any;
    /**
     * Check if the type is a sub command or sub command group
     * @param {ApplicationCommandType} type The type to check
     * @deprecated We don't support arguments in object/array. Use [CommandInteractionOptionResolveer](https://discord.js.org/#/docs/discord.js/stable/class/CommandInteractionOptionResolver)
     * @returns {boolean}
     */
    static checkIfSubOrGroup(type: ApplicationCommandType): boolean;
    /**
     * Check if the input is a class
     * @param {any} input The input to check
     * @returns {boolean}
     */
    static isClass(input: any): boolean;
    /**
     * Converts option names from camelCase to snake_case
     * @param {Object<string, string>} options The options to convert
     * @deprecated This method is no longer used anywhere
     * @returns {Object<string, string>}
     */
    static resolveArgumentOptions(options: [key: string, value: string]): [key: string, value: string];
    /**
     * The method that resolves the file for directoryLoader
     * @param {any} file The file that will be resolved
     * @param {string} fileType The file type
     * @returns {any}
     */
    static resolveFile(file: any, fileType: string): any;
    /**
     * The method that converts a string to a boolean
     * @param {string} text The text to convert
     * @deprecated This method is no longer used anywhere
     * @returns
     */
    static stringToBoolean(text: string): boolean;
    /**
     * The method that solves the error validation trace
     * @param {any[]} array
     * @returns
     */
    static resolveValidationErrorTrace(array: any[]): string;
    /**
     * The method that modifies numbers and adds `0` before numbers that are less than 10
     * @param {number} number The number to modify
     * @returns {string}
     */
    static pad(number: number): string;
    /**
     * The method that throws an error to the console
     * @param {string} error  The error to throw
     * @param {string} name  The name of the class or file path that threw the error
     */
    static throwError(error: any, name: any): void;
    /**
     * The method that converts case to PascalCase
     * @param {string} text The text to convert
     * @deprecated This method is no longer used anywhere
     * @returns {string}
     */
    static toPascalCase(text: string): string;
    /**
     * The method that runs command or component inhibitor
     * @param {CommandContext|ComponentContext} ctx The context to run the inhibitor on
     * @param {CommandInhibitor|ComponentInhibitor} inhibitor The inhibitor to run
     * @returns
     */
    static runInhibitor(ctx: CommandContext | ComponentContext, inhibitor: CommandInhibitor | ComponentInhibitor): Promise<boolean>;
    /**
     * The method that uses `@gcommands/plugin-language` to get a message in a specific language
     * @param {string} value The value to get
     * @param {{client: import('discord.js').Client | import('../GClient').GClient}} client The client to get the default response
     * @returns {Promise<string>}
     */
    static getResponse(value: string, interaction: {
        client: Client | GClient;
    }): Promise<string>;
}
//# sourceMappingURL=Util.d.ts.map